{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_DETAILS_RESET, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAIL, USER_LIST_RESET, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL } from '../constants/userConstants';\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'; // Actions to login\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // Make post request to login\n\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    }); // Set user to local storage\n\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: // Send a custom error message\n      // Else send a generic error message\n      error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Actions to logout\n\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  localStorage.removeItem('cartItems');\n  localStorage.removeItem('shippingAddress');\n  localStorage.removeItem('paymentMethod');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n  dispatch({\n    type: ORDER_LIST_MY_RESET\n  });\n  dispatch({\n    type: USER_LIST_RESET\n  });\n  document.location.href = '/login';\n}; // Actions to register\n\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // Make post request to register\n\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config); // Dispatch register\n\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    }); // Auto login after registration\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    }); // Set user to local storage\n\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: // Send a custom error message\n      // Else send a generic error message\n      error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Actions to get user details\n\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    }); // Get userInfo from userLogin by destructuring\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; // Make get request to get user details\n\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config); // Dispatch user details\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: // Send a custom error message\n      // Else send a generic error message\n      error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Actions to get user details\n\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    }); // Get userInfo from userLogin by destructuring\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; // Make put request to update user profile\n\n    const {\n      data\n    } = await axios.put('/api/users/profile', user, config); // Dispatch update profile\n\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    }); // Dispatch user login success\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    }); // Set user to local storage\n\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: // Send a custom error message\n      // Else send a generic error message\n      error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Actions to get user details\n\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    }); // Get userInfo from userLogin by destructuring\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; // Make get request to get list of users\n\n    const {\n      data\n    } = await axios.get('/api/users', config);\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: // Send a custom error message\n      // Else send a generic error message\n      error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Actions to delete user\n\nexport const deleteUser = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    }); // Get userInfo from userLogin by destructuring\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; // Make delete request to delete a user\n\n    await axios.delete(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: // Send a custom error message\n      // Else send a generic error message\n      error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Actions to update user\n\nexport const updateUser = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    }); // Get userInfo from userLogin by destructuring\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; // Make put request to update a user\n\n    const {\n      data\n    } = await axios.put(`/api/users/${user._id}`, user, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS\n    });\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_DETAILS_RESET\n    });\n  } catch (error) {\n    const message = // Send a custom error message\n    // Else send a generic error message\n    error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/konghaoming/Desktop/9065Final/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","ORDER_LIST_MY_RESET","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","document","location","href","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put","listUsers","deleteUser","delete","updateUser","_id"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n\tUSER_LOGIN_REQUEST,\n\tUSER_LOGIN_SUCCESS,\n\tUSER_LOGIN_FAIL,\n\tUSER_LOGOUT,\n\tUSER_REGISTER_REQUEST,\n\tUSER_REGISTER_SUCCESS,\n\tUSER_REGISTER_FAIL,\n\tUSER_DETAILS_REQUEST,\n\tUSER_DETAILS_SUCCESS,\n\tUSER_DETAILS_FAIL,\n\tUSER_DETAILS_RESET,\n\tUSER_UPDATE_PROFILE_REQUEST,\n\tUSER_UPDATE_PROFILE_SUCCESS,\n\tUSER_UPDATE_PROFILE_FAIL,\n\tUSER_LIST_REQUEST,\n\tUSER_LIST_SUCCESS,\n\tUSER_LIST_FAIL,\n\tUSER_LIST_RESET,\n\tUSER_DELETE_REQUEST,\n\tUSER_DELETE_SUCCESS,\n\tUSER_DELETE_FAIL,\n\tUSER_UPDATE_REQUEST,\n\tUSER_UPDATE_SUCCESS,\n\tUSER_UPDATE_FAIL,\n} from '../constants/userConstants'\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\n\n// Actions to login\nexport const login = (email, password) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: USER_LOGIN_REQUEST })\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t}\n\n\t\t// Make post request to login\n\t\tconst { data } = await axios.post(\n\t\t\t'/api/users/login',\n\t\t\t{ email, password },\n\t\t\tconfig\n\t\t)\n\n\t\tdispatch({\n\t\t\ttype: USER_LOGIN_SUCCESS,\n\t\t\tpayload: data,\n\t\t})\n\t\t// Set user to local storage\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data))\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_LOGIN_FAIL,\n\t\t\tpayload:\n\t\t\t\t// Send a custom error message\n\t\t\t\t// Else send a generic error message\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t})\n\t}\n}\n// Actions to logout\nexport const logout = () => (dispatch) => {\n\tlocalStorage.removeItem('userInfo')\n\tlocalStorage.removeItem('cartItems')\n\tlocalStorage.removeItem('shippingAddress')\n\tlocalStorage.removeItem('paymentMethod')\n\tdispatch({ type: USER_LOGOUT })\n\tdispatch({ type: USER_DETAILS_RESET })\n\tdispatch({ type: ORDER_LIST_MY_RESET })\n\tdispatch({ type: USER_LIST_RESET })\n\tdocument.location.href = '/login'\n}\n// Actions to register\nexport const register = (name, email, password) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: USER_REGISTER_REQUEST })\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t}\n\n\t\t// Make post request to register\n\t\tconst { data } = await axios.post(\n\t\t\t'/api/users',\n\t\t\t{ name, email, password },\n\t\t\tconfig\n\t\t)\n\t\t// Dispatch register\n\t\tdispatch({\n\t\t\ttype: USER_REGISTER_SUCCESS,\n\t\t\tpayload: data,\n\t\t})\n\t\t// Auto login after registration\n\t\tdispatch({\n\t\t\ttype: USER_LOGIN_SUCCESS,\n\t\t\tpayload: data,\n\t\t})\n\t\t// Set user to local storage\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data))\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_REGISTER_FAIL,\n\t\t\tpayload:\n\t\t\t\t// Send a custom error message\n\t\t\t\t// Else send a generic error message\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t})\n\t}\n}\n// Actions to get user details\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: USER_DETAILS_REQUEST })\n\n\t\t// Get userInfo from userLogin by destructuring\n\t\tconst {\n\t\t\tuserLogin: { userInfo },\n\t\t} = getState()\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\n\t\t\t},\n\t\t}\n\n\t\t// Make get request to get user details\n\t\tconst { data } = await axios.get(`/api/users/${id}`, config)\n\t\t// Dispatch user details\n\t\tdispatch({\n\t\t\ttype: USER_DETAILS_SUCCESS,\n\t\t\tpayload: data,\n\t\t})\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_DETAILS_FAIL,\n\t\t\tpayload:\n\t\t\t\t// Send a custom error message\n\t\t\t\t// Else send a generic error message\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t})\n\t}\n}\n// Actions to get user details\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: USER_UPDATE_PROFILE_REQUEST })\n\n\t\t// Get userInfo from userLogin by destructuring\n\t\tconst {\n\t\t\tuserLogin: { userInfo },\n\t\t} = getState()\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\n\t\t\t},\n\t\t}\n\n\t\t// Make put request to update user profile\n\t\tconst { data } = await axios.put('/api/users/profile', user, config)\n\t\t// Dispatch update profile\n\t\tdispatch({\n\t\t\ttype: USER_UPDATE_PROFILE_SUCCESS,\n\t\t\tpayload: data,\n\t\t})\n\t\t// Dispatch user login success\n\t\tdispatch({\n\t\t\ttype: USER_LOGIN_SUCCESS,\n\t\t\tpayload: data,\n\t\t})\n\t\t// Set user to local storage\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data))\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_UPDATE_PROFILE_FAIL,\n\t\t\tpayload:\n\t\t\t\t// Send a custom error message\n\t\t\t\t// Else send a generic error message\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t})\n\t}\n}\n// Actions to get user details\nexport const listUsers = () => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: USER_LIST_REQUEST })\n\n\t\t// Get userInfo from userLogin by destructuring\n\t\tconst {\n\t\t\tuserLogin: { userInfo },\n\t\t} = getState()\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\n\t\t\t},\n\t\t}\n\n\t\t// Make get request to get list of users\n\t\tconst { data } = await axios.get('/api/users', config)\n\n\t\tdispatch({\n\t\t\ttype: USER_LIST_SUCCESS,\n\t\t\tpayload: data,\n\t\t})\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_LIST_FAIL,\n\t\t\tpayload:\n\t\t\t\t// Send a custom error message\n\t\t\t\t// Else send a generic error message\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t})\n\t}\n}\n// Actions to delete user\nexport const deleteUser = (id) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: USER_DELETE_REQUEST })\n\n\t\t// Get userInfo from userLogin by destructuring\n\t\tconst {\n\t\t\tuserLogin: { userInfo },\n\t\t} = getState()\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\n\t\t\t},\n\t\t}\n\n\t\t// Make delete request to delete a user\n\t\tawait axios.delete(`/api/users/${id}`, config)\n\n\t\tdispatch({ type: USER_DELETE_SUCCESS })\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: USER_DELETE_FAIL,\n\t\t\tpayload:\n\t\t\t\t// Send a custom error message\n\t\t\t\t// Else send a generic error message\n\t\t\t\terror.response && error.response.data.message\n\t\t\t\t\t? error.response.data.message\n\t\t\t\t\t: error.message,\n\t\t})\n\t}\n}\n// Actions to update user\nexport const updateUser = (user) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: USER_UPDATE_REQUEST })\n\n\t\t// Get userInfo from userLogin by destructuring\n\t\tconst {\n\t\t\tuserLogin: { userInfo },\n\t\t} = getState()\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`,\n\t\t\t},\n\t\t}\n\n\t\t// Make put request to update a user\n\t\tconst { data } = await axios.put(`/api/users/${user._id}`, user, config)\n\n\t\tdispatch({ type: USER_UPDATE_SUCCESS })\n\t\tdispatch({ type: USER_DETAILS_SUCCESS, payload: data })\n\t\tdispatch({ type: USER_DETAILS_RESET })\n\t} catch (error) {\n\t\tconst message = // Send a custom error message\n\t\t\t// Else send a generic error message\n\t\t\terror.response && error.response.data.message\n\t\t\t\t? error.response.data.message\n\t\t\t\t: error.message\n\t\tif (message === 'Not authorized, token failed') {\n\t\t\tdispatch(logout())\n\t\t}\n\t\tdispatch({\n\t\t\ttype: USER_UPDATE_FAIL,\n\t\t\tpayload: message,\n\t\t})\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}