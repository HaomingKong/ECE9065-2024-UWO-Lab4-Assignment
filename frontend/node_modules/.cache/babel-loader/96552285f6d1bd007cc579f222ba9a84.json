{"ast":null,"code":"import { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_DETAILS_RESET, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_RESET, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAIL, USER_LIST_RESET, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_RESET } from '../constants/userConstants'; // userLoginReducer for users\n\nexport const userLoginReducer = (state = {}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case USER_LOGIN_REQUEST:\n      return {\n        loading: true\n      };\n    // On success\n    // userInfo will contain data as a payload\n    // loading will be done, so false\n\n    case USER_LOGIN_SUCCESS:\n      return {\n        loading: false,\n        userInfo: action.payload\n      };\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n\n    case USER_LOGIN_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n    // On Logout\n\n    case USER_LOGOUT:\n      return {};\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n}; // userRegisterReducer for users\n\nexport const userRegisterReducer = (state = {}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case USER_REGISTER_REQUEST:\n      return {\n        loading: true\n      };\n    // On success\n    // userInfo will contain data as a payload\n    // loading will be done, so false\n\n    case USER_REGISTER_SUCCESS:\n      return {\n        loading: false,\n        userInfo: action.payload\n      };\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n\n    case USER_REGISTER_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n}; // userDetailsReducer for users\n\nexport const userDetailsReducer = (state = {\n  user: {}\n}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case USER_DETAILS_REQUEST:\n      return { ...state,\n        loading: true\n      };\n    // On success\n    // user will contain data as a payload\n    // loading will be done, so false\n\n    case USER_DETAILS_SUCCESS:\n      return {\n        loading: false,\n        user: action.payload\n      };\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n\n    case USER_DETAILS_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case USER_DETAILS_RESET:\n      return {\n        user: {}\n      };\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n}; // userUpdateProfileReducer for users\n\nexport const userUpdateProfileReducer = (state = {}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case USER_UPDATE_PROFILE_REQUEST:\n      return {\n        loading: true\n      };\n    // On success\n    // userInfo will contain data as a payload\n    // loading will be done, so false\n\n    case USER_UPDATE_PROFILE_SUCCESS:\n      return {\n        loading: false,\n        success: true,\n        userInfo: action.payload\n      };\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n\n    case USER_UPDATE_PROFILE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n    // Then reset\n\n    case USER_UPDATE_PROFILE_RESET:\n      return {};\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n}; // userListReducer for admin users\n\nexport const userListReducer = (state = {\n  users: []\n}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case USER_LIST_REQUEST:\n      return {\n        loading: true\n      };\n    // On success\n    // users will contain data as a payload\n    // loading will be done, so false\n\n    case USER_LIST_SUCCESS:\n      return {\n        loading: false,\n        users: action.payload\n      };\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n\n    case USER_LIST_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case USER_LIST_RESET:\n      return {\n        users: []\n      };\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n}; // userDeleteReducer for admin users\n\nexport const userDeleteReducer = (state = {}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case USER_DELETE_REQUEST:\n      return {\n        loading: true\n      };\n    // On success\n    // loading will be done, so false\n\n    case USER_DELETE_SUCCESS:\n      return {\n        loading: false,\n        success: true\n      };\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n\n    case USER_DELETE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n}; // userUpdateReducer for admin users\n\nexport const userUpdateReducer = (state = {\n  user: {}\n}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case USER_UPDATE_REQUEST:\n      return {\n        loading: true\n      };\n    // On success\n    // loading will be done, so false\n\n    case USER_UPDATE_SUCCESS:\n      return {\n        loading: false,\n        success: true\n      };\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n\n    case USER_UPDATE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case USER_UPDATE_RESET:\n      return {\n        user: {}\n      };\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/konghaoming/Desktop/react-complete-e-commerce-main/frontend/src/reducers/userReducers.js"],"names":["USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_RESET","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_RESET","userLoginReducer","state","action","type","loading","userInfo","payload","error","userRegisterReducer","userDetailsReducer","user","userUpdateProfileReducer","success","userListReducer","users","userDeleteReducer","userUpdateReducer"],"mappings":"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","sourcesContent":["import {\n\tUSER_LOGIN_REQUEST,\n\tUSER_LOGIN_SUCCESS,\n\tUSER_LOGIN_FAIL,\n\tUSER_LOGOUT,\n\tUSER_REGISTER_REQUEST,\n\tUSER_REGISTER_SUCCESS,\n\tUSER_REGISTER_FAIL,\n\tUSER_DETAILS_REQUEST,\n\tUSER_DETAILS_SUCCESS,\n\tUSER_DETAILS_FAIL,\n\tUSER_DETAILS_RESET,\n\tUSER_UPDATE_PROFILE_REQUEST,\n\tUSER_UPDATE_PROFILE_SUCCESS,\n\tUSER_UPDATE_PROFILE_FAIL,\n\tUSER_UPDATE_PROFILE_RESET,\n\tUSER_LIST_REQUEST,\n\tUSER_LIST_SUCCESS,\n\tUSER_LIST_FAIL,\n\tUSER_LIST_RESET,\n\tUSER_DELETE_REQUEST,\n\tUSER_DELETE_SUCCESS,\n\tUSER_DELETE_FAIL,\n\tUSER_UPDATE_REQUEST,\n\tUSER_UPDATE_SUCCESS,\n\tUSER_UPDATE_FAIL,\n\tUSER_UPDATE_RESET,\n} from '../constants/userConstants'\n\n// userLoginReducer for users\nexport const userLoginReducer = (state = {}, action) => {\n\tswitch (action.type) {\n\t\t// loading will NOT be done yet, so true\n\t\tcase USER_LOGIN_REQUEST:\n\t\t\treturn { loading: true }\n\n\t\t// On success\n\t\t// userInfo will contain data as a payload\n\t\t// loading will be done, so false\n\t\tcase USER_LOGIN_SUCCESS:\n\t\t\treturn { loading: false, userInfo: action.payload }\n\n\t\t// On fail\n\t\t// the error will contain the payload\n\t\t// loading will be done, so false\n\t\tcase USER_LOGIN_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\n\t\t// On Logout\n\t\tcase USER_LOGOUT:\n\t\t\treturn {}\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n// userRegisterReducer for users\nexport const userRegisterReducer = (state = {}, action) => {\n\tswitch (action.type) {\n\t\t// loading will NOT be done yet, so true\n\t\tcase USER_REGISTER_REQUEST:\n\t\t\treturn { loading: true }\n\n\t\t// On success\n\t\t// userInfo will contain data as a payload\n\t\t// loading will be done, so false\n\t\tcase USER_REGISTER_SUCCESS:\n\t\t\treturn { loading: false, userInfo: action.payload }\n\n\t\t// On fail\n\t\t// the error will contain the payload\n\t\t// loading will be done, so false\n\t\tcase USER_REGISTER_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n// userDetailsReducer for users\nexport const userDetailsReducer = (state = { user: {} }, action) => {\n\tswitch (action.type) {\n\t\t// loading will NOT be done yet, so true\n\t\tcase USER_DETAILS_REQUEST:\n\t\t\treturn { ...state, loading: true }\n\n\t\t// On success\n\t\t// user will contain data as a payload\n\t\t// loading will be done, so false\n\t\tcase USER_DETAILS_SUCCESS:\n\t\t\treturn { loading: false, user: action.payload }\n\n\t\t// On fail\n\t\t// the error will contain the payload\n\t\t// loading will be done, so false\n\t\tcase USER_DETAILS_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\t\tcase USER_DETAILS_RESET:\n\t\t\treturn { user: {} }\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n// userUpdateProfileReducer for users\nexport const userUpdateProfileReducer = (state = {}, action) => {\n\tswitch (action.type) {\n\t\t// loading will NOT be done yet, so true\n\t\tcase USER_UPDATE_PROFILE_REQUEST:\n\t\t\treturn { loading: true }\n\n\t\t// On success\n\t\t// userInfo will contain data as a payload\n\t\t// loading will be done, so false\n\t\tcase USER_UPDATE_PROFILE_SUCCESS:\n\t\t\treturn { loading: false, success: true, userInfo: action.payload }\n\n\t\t// On fail\n\t\t// the error will contain the payload\n\t\t// loading will be done, so false\n\t\tcase USER_UPDATE_PROFILE_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\n\t\t// Then reset\n\t\tcase USER_UPDATE_PROFILE_RESET:\n\t\t\treturn {}\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n// userListReducer for admin users\nexport const userListReducer = (state = { users: [] }, action) => {\n\tswitch (action.type) {\n\t\t// loading will NOT be done yet, so true\n\t\tcase USER_LIST_REQUEST:\n\t\t\treturn { loading: true }\n\n\t\t// On success\n\t\t// users will contain data as a payload\n\t\t// loading will be done, so false\n\t\tcase USER_LIST_SUCCESS:\n\t\t\treturn { loading: false, users: action.payload }\n\n\t\t// On fail\n\t\t// the error will contain the payload\n\t\t// loading will be done, so false\n\t\tcase USER_LIST_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\t\tcase USER_LIST_RESET:\n\t\t\treturn { users: [] }\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n// userDeleteReducer for admin users\nexport const userDeleteReducer = (state = {}, action) => {\n\tswitch (action.type) {\n\t\t// loading will NOT be done yet, so true\n\t\tcase USER_DELETE_REQUEST:\n\t\t\treturn { loading: true }\n\n\t\t// On success\n\t\t// loading will be done, so false\n\t\tcase USER_DELETE_SUCCESS:\n\t\t\treturn { loading: false, success: true }\n\n\t\t// On fail\n\t\t// the error will contain the payload\n\t\t// loading will be done, so false\n\t\tcase USER_DELETE_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n// userUpdateReducer for admin users\nexport const userUpdateReducer = (state = { user: {} }, action) => {\n\tswitch (action.type) {\n\t\t// loading will NOT be done yet, so true\n\t\tcase USER_UPDATE_REQUEST:\n\t\t\treturn { loading: true }\n\n\t\t// On success\n\t\t// loading will be done, so false\n\t\tcase USER_UPDATE_SUCCESS:\n\t\t\treturn { loading: false, success: true }\n\n\t\t// On fail\n\t\t// the error will contain the payload\n\t\t// loading will be done, so false\n\t\tcase USER_UPDATE_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\n\t\tcase USER_UPDATE_RESET:\n\t\t\treturn { user: {} }\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}