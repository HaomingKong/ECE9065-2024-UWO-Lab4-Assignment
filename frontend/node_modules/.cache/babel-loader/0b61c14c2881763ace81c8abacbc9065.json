{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DELETE_REQUEST, PRODUCT_DELETE_SUCCESS, PRODUCT_DELETE_FAIL, PRODUCT_CREATE_REQUEST, PRODUCT_CREATE_SUCCESS, PRODUCT_CREATE_FAIL, PRODUCT_CREATE_RESET, PRODUCT_UPDATE_REQUEST, PRODUCT_UPDATE_SUCCESS, PRODUCT_UPDATE_FAIL, PRODUCT_UPDATE_RESET, PRODUCT_CREATE_REVIEW_REQUEST, PRODUCT_CREATE_REVIEW_SUCCESS, PRODUCT_CREATE_REVIEW_FAIL, PRODUCT_CREATE_REVIEW_RESET, PRODUCT_TOP_REQUEST, PRODUCT_TOP_SUCCESS, PRODUCT_TOP_FAIL } from '../constants/productConstants'; // productListReducer for all products\n\nexport const productListReducer = (state = {\n  products: []\n}, action) => {\n  switch (action.type) {\n    // Requests product list\n    // products is an empty array because its still loading\n    // loading will NOT be done yet, so true\n    case PRODUCT_LIST_REQUEST:\n      return {\n        loading: true,\n        products: []\n      };\n    // On success\n    // products will contain data as a payload\n    // loading will be done, so false\n\n    case PRODUCT_LIST_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload.products,\n        pages: action.payload.pages,\n        page: action.payload.page\n      };\n    // On fail\n    // products will contain the error as a payload\n    // loading will be done, so false\n\n    case PRODUCT_LIST_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n}; // productDetailsReducer for a single product\n\nexport const productDetailsReducer = (state = {\n  product: {\n    reviews: []\n  }\n}, action) => {\n  switch (action.type) {\n    // Requests a product\n    // product is an empty object because its still loading\n    // reviews is an empty array because its still loading\n    // loading will NOT be done yet, so true\n    // add contents of state using a spread operator (...)\n    case PRODUCT_DETAILS_REQUEST:\n      return {\n        loading: true,\n        ...state\n      };\n    // On success\n    // product will contain data as a payload\n    // loading will be done, so false\n\n    case PRODUCT_DETAILS_SUCCESS:\n      return {\n        loading: false,\n        product: action.payload\n      };\n    // On fail\n    // product will contain the error as a payload\n    // loading will be done, so false\n\n    case PRODUCT_DETAILS_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n}; // productDeleteReducer for admin users\n\nexport const productDeleteReducer = (state = {}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case PRODUCT_DELETE_REQUEST:\n      return {\n        loading: true\n      };\n    // On success\n    // loading will be done, so false\n\n    case PRODUCT_DELETE_SUCCESS:\n      return {\n        loading: false,\n        success: true\n      };\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n\n    case PRODUCT_DELETE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n}; // productCreateReducer for admin users\n\nexport const productCreateReducer = (state = {}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case PRODUCT_CREATE_REQUEST:\n      return {\n        loading: true\n      };\n    // On success\n    // loading will be done, so false\n\n    case PRODUCT_CREATE_SUCCESS:\n      return {\n        loading: false,\n        success: true,\n        product: action.payload\n      };\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n\n    case PRODUCT_CREATE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case PRODUCT_CREATE_RESET:\n      return {};\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n}; // productUpdateReducer for admin users\n\nexport const productUpdateReducer = (state = {\n  product: {}\n}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case PRODUCT_UPDATE_REQUEST:\n      return {\n        loading: true\n      };\n    // On success\n    // loading will be done, so false\n\n    case PRODUCT_UPDATE_SUCCESS:\n      return {\n        loading: false,\n        success: true,\n        product: action.payload\n      };\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n\n    case PRODUCT_UPDATE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case PRODUCT_UPDATE_RESET:\n      return {\n        product: {}\n      };\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n}; // productReviewCreateReducer for logged in users\n\nexport const productReviewCreateReducer = (state = {}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case PRODUCT_CREATE_REVIEW_REQUEST:\n      return {\n        loading: true\n      };\n    // On success\n    // loading will be done, so false\n\n    case PRODUCT_CREATE_REVIEW_SUCCESS:\n      return {\n        loading: false,\n        success: true\n      };\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n\n    case PRODUCT_CREATE_REVIEW_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    case PRODUCT_CREATE_REVIEW_RESET:\n      return {};\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n}; // productTopRatedReducer\n\nexport const productTopRatedReducer = (state = {\n  products: []\n}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case PRODUCT_TOP_REQUEST:\n      return {\n        loading: true,\n        products: []\n      };\n    // On success\n    // loading will be done, so false\n\n    case PRODUCT_TOP_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload\n      };\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n\n    case PRODUCT_TOP_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/konghaoming/Desktop/9065Final/frontend/src/reducers/productReducers.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_DELETE_REQUEST","PRODUCT_DELETE_SUCCESS","PRODUCT_DELETE_FAIL","PRODUCT_CREATE_REQUEST","PRODUCT_CREATE_SUCCESS","PRODUCT_CREATE_FAIL","PRODUCT_CREATE_RESET","PRODUCT_UPDATE_REQUEST","PRODUCT_UPDATE_SUCCESS","PRODUCT_UPDATE_FAIL","PRODUCT_UPDATE_RESET","PRODUCT_CREATE_REVIEW_REQUEST","PRODUCT_CREATE_REVIEW_SUCCESS","PRODUCT_CREATE_REVIEW_FAIL","PRODUCT_CREATE_REVIEW_RESET","PRODUCT_TOP_REQUEST","PRODUCT_TOP_SUCCESS","PRODUCT_TOP_FAIL","productListReducer","state","products","action","type","loading","payload","pages","page","error","productDetailsReducer","product","reviews","productDeleteReducer","success","productCreateReducer","productUpdateReducer","productReviewCreateReducer","productTopRatedReducer"],"mappings":"AAAA,SACCA,oBADD,EAECC,oBAFD,EAGCC,iBAHD,EAICC,uBAJD,EAKCC,uBALD,EAMCC,oBAND,EAOCC,sBAPD,EAQCC,sBARD,EASCC,mBATD,EAUCC,sBAVD,EAWCC,sBAXD,EAYCC,mBAZD,EAaCC,oBAbD,EAcCC,sBAdD,EAeCC,sBAfD,EAgBCC,mBAhBD,EAiBCC,oBAjBD,EAkBCC,6BAlBD,EAmBCC,6BAnBD,EAoBCC,0BApBD,EAqBCC,2BArBD,EAsBCC,mBAtBD,EAuBCC,mBAvBD,EAwBCC,gBAxBD,QAyBO,+BAzBP,C,CA2BA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAT,EAA2BC,MAA3B,KAAsC;AACvE,UAAQA,MAAM,CAACC,IAAf;AACC;AACA;AACA;AACA,SAAK5B,oBAAL;AACC,aAAO;AAAE6B,QAAAA,OAAO,EAAE,IAAX;AAAiBH,QAAAA,QAAQ,EAAE;AAA3B,OAAP;AAED;AACA;AACA;;AACA,SAAKzB,oBAAL;AACC,aAAO;AACN4B,QAAAA,OAAO,EAAE,KADH;AAENH,QAAAA,QAAQ,EAAEC,MAAM,CAACG,OAAP,CAAeJ,QAFnB;AAGNK,QAAAA,KAAK,EAAEJ,MAAM,CAACG,OAAP,CAAeC,KAHhB;AAINC,QAAAA,IAAI,EAAEL,MAAM,CAACG,OAAP,CAAeE;AAJf,OAAP;AAOD;AACA;AACA;;AACA,SAAK9B,iBAAL;AACC,aAAO;AAAE2B,QAAAA,OAAO,EAAE,KAAX;AAAkBI,QAAAA,KAAK,EAAEN,MAAM,CAACG;AAAhC,OAAP;AAED;;AACA;AACC,aAAOL,KAAP;AA1BF;AA4BA,CA7BM,C,CA+BP;;AACA,OAAO,MAAMS,qBAAqB,GAAG,CACpCT,KAAK,GAAG;AAAEU,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAO,EAAE;AAAX;AAAX,CAD4B,EAEpCT,MAFoC,KAGhC;AACJ,UAAQA,MAAM,CAACC,IAAf;AACC;AACA;AACA;AACA;AACA;AACA,SAAKzB,uBAAL;AACC,aAAO;AAAE0B,QAAAA,OAAO,EAAE,IAAX;AAAiB,WAAGJ;AAApB,OAAP;AAED;AACA;AACA;;AACA,SAAKrB,uBAAL;AACC,aAAO;AAAEyB,QAAAA,OAAO,EAAE,KAAX;AAAkBM,QAAAA,OAAO,EAAER,MAAM,CAACG;AAAlC,OAAP;AAED;AACA;AACA;;AACA,SAAKzB,oBAAL;AACC,aAAO;AAAEwB,QAAAA,OAAO,EAAE,KAAX;AAAkBI,QAAAA,KAAK,EAAEN,MAAM,CAACG;AAAhC,OAAP;AAED;;AACA;AACC,aAAOL,KAAP;AAvBF;AAyBA,CA7BM,C,CA8BP;;AACA,OAAO,MAAMY,oBAAoB,GAAG,CAACZ,KAAK,GAAG,EAAT,EAAaE,MAAb,KAAwB;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACC;AACA,SAAKtB,sBAAL;AACC,aAAO;AAAEuB,QAAAA,OAAO,EAAE;AAAX,OAAP;AAED;AACA;;AACA,SAAKtB,sBAAL;AACC,aAAO;AAAEsB,QAAAA,OAAO,EAAE,KAAX;AAAkBS,QAAAA,OAAO,EAAE;AAA3B,OAAP;AAED;AACA;AACA;;AACA,SAAK9B,mBAAL;AACC,aAAO;AAAEqB,QAAAA,OAAO,EAAE,KAAX;AAAkBI,QAAAA,KAAK,EAAEN,MAAM,CAACG;AAAhC,OAAP;AAED;;AACA;AACC,aAAOL,KAAP;AAlBF;AAoBA,CArBM,C,CAsBP;;AACA,OAAO,MAAMc,oBAAoB,GAAG,CAACd,KAAK,GAAG,EAAT,EAAaE,MAAb,KAAwB;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACC;AACA,SAAKnB,sBAAL;AACC,aAAO;AAAEoB,QAAAA,OAAO,EAAE;AAAX,OAAP;AAED;AACA;;AACA,SAAKnB,sBAAL;AACC,aAAO;AAAEmB,QAAAA,OAAO,EAAE,KAAX;AAAkBS,QAAAA,OAAO,EAAE,IAA3B;AAAiCH,QAAAA,OAAO,EAAER,MAAM,CAACG;AAAjD,OAAP;AAED;AACA;AACA;;AACA,SAAKnB,mBAAL;AACC,aAAO;AAAEkB,QAAAA,OAAO,EAAE,KAAX;AAAkBI,QAAAA,KAAK,EAAEN,MAAM,CAACG;AAAhC,OAAP;;AAED,SAAKlB,oBAAL;AACC,aAAO,EAAP;AAED;;AACA;AACC,aAAOa,KAAP;AArBF;AAuBA,CAxBM,C,CAyBP;;AACA,OAAO,MAAMe,oBAAoB,GAAG,CAACf,KAAK,GAAG;AAAEU,EAAAA,OAAO,EAAE;AAAX,CAAT,EAA0BR,MAA1B,KAAqC;AACxE,UAAQA,MAAM,CAACC,IAAf;AACC;AACA,SAAKf,sBAAL;AACC,aAAO;AAAEgB,QAAAA,OAAO,EAAE;AAAX,OAAP;AAED;AACA;;AACA,SAAKf,sBAAL;AACC,aAAO;AAAEe,QAAAA,OAAO,EAAE,KAAX;AAAkBS,QAAAA,OAAO,EAAE,IAA3B;AAAiCH,QAAAA,OAAO,EAAER,MAAM,CAACG;AAAjD,OAAP;AAED;AACA;AACA;;AACA,SAAKf,mBAAL;AACC,aAAO;AAAEc,QAAAA,OAAO,EAAE,KAAX;AAAkBI,QAAAA,KAAK,EAAEN,MAAM,CAACG;AAAhC,OAAP;;AAED,SAAKd,oBAAL;AACC,aAAO;AAAEmB,QAAAA,OAAO,EAAE;AAAX,OAAP;AAED;;AACA;AACC,aAAOV,KAAP;AArBF;AAuBA,CAxBM,C,CAyBP;;AACA,OAAO,MAAMgB,0BAA0B,GAAG,CAAChB,KAAK,GAAG,EAAT,EAAaE,MAAb,KAAwB;AACjE,UAAQA,MAAM,CAACC,IAAf;AACC;AACA,SAAKX,6BAAL;AACC,aAAO;AAAEY,QAAAA,OAAO,EAAE;AAAX,OAAP;AAED;AACA;;AACA,SAAKX,6BAAL;AACC,aAAO;AAAEW,QAAAA,OAAO,EAAE,KAAX;AAAkBS,QAAAA,OAAO,EAAE;AAA3B,OAAP;AAED;AACA;AACA;;AACA,SAAKnB,0BAAL;AACC,aAAO;AAAEU,QAAAA,OAAO,EAAE,KAAX;AAAkBI,QAAAA,KAAK,EAAEN,MAAM,CAACG;AAAhC,OAAP;;AAED,SAAKV,2BAAL;AACC,aAAO,EAAP;AAED;;AACA;AACC,aAAOK,KAAP;AArBF;AAuBA,CAxBM,C,CAyBP;;AACA,OAAO,MAAMiB,sBAAsB,GAAG,CAACjB,KAAK,GAAG;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAT,EAA2BC,MAA3B,KAAsC;AAC3E,UAAQA,MAAM,CAACC,IAAf;AACC;AACA,SAAKP,mBAAL;AACC,aAAO;AAAEQ,QAAAA,OAAO,EAAE,IAAX;AAAiBH,QAAAA,QAAQ,EAAE;AAA3B,OAAP;AAED;AACA;;AACA,SAAKJ,mBAAL;AACC,aAAO;AAAEO,QAAAA,OAAO,EAAE,KAAX;AAAkBH,QAAAA,QAAQ,EAAEC,MAAM,CAACG;AAAnC,OAAP;AAED;AACA;AACA;;AACA,SAAKP,gBAAL;AACC,aAAO;AAAEM,QAAAA,OAAO,EAAE,KAAX;AAAkBI,QAAAA,KAAK,EAAEN,MAAM,CAACG;AAAhC,OAAP;AAED;;AACA;AACC,aAAOL,KAAP;AAlBF;AAoBA,CArBM","sourcesContent":["import {\n\tPRODUCT_LIST_REQUEST,\n\tPRODUCT_LIST_SUCCESS,\n\tPRODUCT_LIST_FAIL,\n\tPRODUCT_DETAILS_REQUEST,\n\tPRODUCT_DETAILS_SUCCESS,\n\tPRODUCT_DETAILS_FAIL,\n\tPRODUCT_DELETE_REQUEST,\n\tPRODUCT_DELETE_SUCCESS,\n\tPRODUCT_DELETE_FAIL,\n\tPRODUCT_CREATE_REQUEST,\n\tPRODUCT_CREATE_SUCCESS,\n\tPRODUCT_CREATE_FAIL,\n\tPRODUCT_CREATE_RESET,\n\tPRODUCT_UPDATE_REQUEST,\n\tPRODUCT_UPDATE_SUCCESS,\n\tPRODUCT_UPDATE_FAIL,\n\tPRODUCT_UPDATE_RESET,\n\tPRODUCT_CREATE_REVIEW_REQUEST,\n\tPRODUCT_CREATE_REVIEW_SUCCESS,\n\tPRODUCT_CREATE_REVIEW_FAIL,\n\tPRODUCT_CREATE_REVIEW_RESET,\n\tPRODUCT_TOP_REQUEST,\n\tPRODUCT_TOP_SUCCESS,\n\tPRODUCT_TOP_FAIL,\n} from '../constants/productConstants'\n\n// productListReducer for all products\nexport const productListReducer = (state = { products: [] }, action) => {\n\tswitch (action.type) {\n\t\t// Requests product list\n\t\t// products is an empty array because its still loading\n\t\t// loading will NOT be done yet, so true\n\t\tcase PRODUCT_LIST_REQUEST:\n\t\t\treturn { loading: true, products: [] }\n\n\t\t// On success\n\t\t// products will contain data as a payload\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_LIST_SUCCESS:\n\t\t\treturn {\n\t\t\t\tloading: false,\n\t\t\t\tproducts: action.payload.products,\n\t\t\t\tpages: action.payload.pages,\n\t\t\t\tpage: action.payload.page,\n\t\t\t}\n\n\t\t// On fail\n\t\t// products will contain the error as a payload\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_LIST_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\n// productDetailsReducer for a single product\nexport const productDetailsReducer = (\n\tstate = { product: { reviews: [] } },\n\taction\n) => {\n\tswitch (action.type) {\n\t\t// Requests a product\n\t\t// product is an empty object because its still loading\n\t\t// reviews is an empty array because its still loading\n\t\t// loading will NOT be done yet, so true\n\t\t// add contents of state using a spread operator (...)\n\t\tcase PRODUCT_DETAILS_REQUEST:\n\t\t\treturn { loading: true, ...state }\n\n\t\t// On success\n\t\t// product will contain data as a payload\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_DETAILS_SUCCESS:\n\t\t\treturn { loading: false, product: action.payload }\n\n\t\t// On fail\n\t\t// product will contain the error as a payload\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_DETAILS_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n// productDeleteReducer for admin users\nexport const productDeleteReducer = (state = {}, action) => {\n\tswitch (action.type) {\n\t\t// loading will NOT be done yet, so true\n\t\tcase PRODUCT_DELETE_REQUEST:\n\t\t\treturn { loading: true }\n\n\t\t// On success\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_DELETE_SUCCESS:\n\t\t\treturn { loading: false, success: true }\n\n\t\t// On fail\n\t\t// the error will contain the payload\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_DELETE_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n// productCreateReducer for admin users\nexport const productCreateReducer = (state = {}, action) => {\n\tswitch (action.type) {\n\t\t// loading will NOT be done yet, so true\n\t\tcase PRODUCT_CREATE_REQUEST:\n\t\t\treturn { loading: true }\n\n\t\t// On success\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_CREATE_SUCCESS:\n\t\t\treturn { loading: false, success: true, product: action.payload }\n\n\t\t// On fail\n\t\t// the error will contain the payload\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_CREATE_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\n\t\tcase PRODUCT_CREATE_RESET:\n\t\t\treturn {}\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n// productUpdateReducer for admin users\nexport const productUpdateReducer = (state = { product: {} }, action) => {\n\tswitch (action.type) {\n\t\t// loading will NOT be done yet, so true\n\t\tcase PRODUCT_UPDATE_REQUEST:\n\t\t\treturn { loading: true }\n\n\t\t// On success\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_UPDATE_SUCCESS:\n\t\t\treturn { loading: false, success: true, product: action.payload }\n\n\t\t// On fail\n\t\t// the error will contain the payload\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_UPDATE_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\n\t\tcase PRODUCT_UPDATE_RESET:\n\t\t\treturn { product: {} }\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n// productReviewCreateReducer for logged in users\nexport const productReviewCreateReducer = (state = {}, action) => {\n\tswitch (action.type) {\n\t\t// loading will NOT be done yet, so true\n\t\tcase PRODUCT_CREATE_REVIEW_REQUEST:\n\t\t\treturn { loading: true }\n\n\t\t// On success\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_CREATE_REVIEW_SUCCESS:\n\t\t\treturn { loading: false, success: true }\n\n\t\t// On fail\n\t\t// the error will contain the payload\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_CREATE_REVIEW_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\n\t\tcase PRODUCT_CREATE_REVIEW_RESET:\n\t\t\treturn {}\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n// productTopRatedReducer\nexport const productTopRatedReducer = (state = { products: [] }, action) => {\n\tswitch (action.type) {\n\t\t// loading will NOT be done yet, so true\n\t\tcase PRODUCT_TOP_REQUEST:\n\t\t\treturn { loading: true, products: [] }\n\n\t\t// On success\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_TOP_SUCCESS:\n\t\t\treturn { loading: false, products: action.payload }\n\n\t\t// On fail\n\t\t// the error will contain the payload\n\t\t// loading will be done, so false\n\t\tcase PRODUCT_TOP_FAIL:\n\t\t\treturn { loading: false, error: action.payload }\n\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}