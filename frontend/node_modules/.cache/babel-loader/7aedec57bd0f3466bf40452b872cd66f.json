{"ast":null,"code":"import { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD, CART_CLEAR_ITEMS } from '../constants/cartConstants';\nexport const cartReducer = (state = {\n  cartItems: [],\n  shippingAddress: {}\n}, action) => {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      // Get item from the payload\n      const item = action.payload; // Assign existItem to item.product if their prpduct ids match\n\n      const existItem = state.cartItems.find(x => x.product === item.product); // Check if item exists or Not\n\n      if (existItem) {\n        return { ...state,\n          cartItems: state.cartItems.map(x => x.product === existItem.product ? item : x)\n        };\n      } else {\n        return { ...state,\n          cartItems: [...state.cartItems, item]\n        };\n      }\n\n    case CART_REMOVE_ITEM:\n      // Filter out cart item id that does NOT match with payload\n      return { ...state,\n        cartItems: state.cartItems.filter(x => x.product !== action.payload)\n      };\n\n    case CART_SAVE_SHIPPING_ADDRESS:\n      return { ...state,\n        shippingAddress: action.payload\n      };\n\n    case CART_SAVE_PAYMENT_METHOD:\n      return { ...state,\n        paymentMethod: action.payload\n      };\n\n    case CART_CLEAR_ITEMS:\n      return { ...state,\n        cartItems: []\n      };\n    // In any other case, just return the state\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/konghaoming/Desktop/react-complete-e-commerce-main 2/frontend/src/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","CART_CLEAR_ITEMS","cartReducer","state","cartItems","shippingAddress","action","type","item","payload","existItem","find","x","product","map","filter","paymentMethod"],"mappings":"AAAA,SACCA,aADD,EAECC,gBAFD,EAGCC,0BAHD,EAICC,wBAJD,EAKCC,gBALD,QAMO,4BANP;AAQA,OAAO,MAAMC,WAAW,GAAG,CAC1BC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE,EAAb;AAAiBC,EAAAA,eAAe,EAAE;AAAlC,CADkB,EAE1BC,MAF0B,KAGtB;AACJ,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKV,aAAL;AACC;AACA,YAAMW,IAAI,GAAGF,MAAM,CAACG,OAApB,CAFD,CAIC;;AACA,YAAMC,SAAS,GAAGP,KAAK,CAACC,SAAN,CAAgBO,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcL,IAAI,CAACK,OAA/C,CAAlB,CALD,CAOC;;AACA,UAAIH,SAAJ,EAAe;AACd,eAAO,EACN,GAAGP,KADG;AAENC,UAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBU,GAAhB,CAAqBF,CAAD,IAC9BA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,GAAkCL,IAAlC,GAAyCI,CAD/B;AAFL,SAAP;AAMA,OAPD,MAOO;AACN,eAAO,EACN,GAAGT,KADG;AAENC,UAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBI,IAArB;AAFL,SAAP;AAIA;;AAEF,SAAKV,gBAAL;AACC;AACA,aAAO,EACN,GAAGK,KADG;AAENC,QAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBW,MAAhB,CAAwBH,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcP,MAAM,CAACG,OAAnD;AAFL,OAAP;;AAID,SAAKV,0BAAL;AACC,aAAO,EACN,GAAGI,KADG;AAENE,QAAAA,eAAe,EAAEC,MAAM,CAACG;AAFlB,OAAP;;AAID,SAAKT,wBAAL;AACC,aAAO,EACN,GAAGG,KADG;AAENa,QAAAA,aAAa,EAAEV,MAAM,CAACG;AAFhB,OAAP;;AAID,SAAKR,gBAAL;AACC,aAAO,EACN,GAAGE,KADG;AAENC,QAAAA,SAAS,EAAE;AAFL,OAAP;AAID;;AACA;AACC,aAAOD,KAAP;AA9CF;AAgDA,CApDM","sourcesContent":["import {\n\tCART_ADD_ITEM,\n\tCART_REMOVE_ITEM,\n\tCART_SAVE_SHIPPING_ADDRESS,\n\tCART_SAVE_PAYMENT_METHOD,\n\tCART_CLEAR_ITEMS,\n} from '../constants/cartConstants'\n\nexport const cartReducer = (\n\tstate = { cartItems: [], shippingAddress: {} },\n\taction\n) => {\n\tswitch (action.type) {\n\t\tcase CART_ADD_ITEM:\n\t\t\t// Get item from the payload\n\t\t\tconst item = action.payload\n\n\t\t\t// Assign existItem to item.product if their prpduct ids match\n\t\t\tconst existItem = state.cartItems.find((x) => x.product === item.product)\n\n\t\t\t// Check if item exists or Not\n\t\t\tif (existItem) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tcartItems: state.cartItems.map((x) =>\n\t\t\t\t\t\tx.product === existItem.product ? item : x\n\t\t\t\t\t),\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tcartItems: [...state.cartItems, item],\n\t\t\t\t}\n\t\t\t}\n\n\t\tcase CART_REMOVE_ITEM:\n\t\t\t// Filter out cart item id that does NOT match with payload\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartItems: state.cartItems.filter((x) => x.product !== action.payload),\n\t\t\t}\n\t\tcase CART_SAVE_SHIPPING_ADDRESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tshippingAddress: action.payload,\n\t\t\t}\n\t\tcase CART_SAVE_PAYMENT_METHOD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpaymentMethod: action.payload,\n\t\t\t}\n\t\tcase CART_CLEAR_ITEMS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartItems: [],\n\t\t\t}\n\t\t// In any other case, just return the state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}