{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer, productDeleteReducer, productCreateReducer, productUpdateReducer, productReviewCreateReducer, productTopRatedReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer, userDeleteReducer, userUpdateReducer } from './reducers/userReducers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer, orderListReducer, orderDeliverReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  userUpdate: userUpdateReducer,\n  userDelete: userDeleteReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderListMy: orderListMyReducer,\n  orderDeliver: orderDeliverReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  orderList: orderListReducer,\n  productReviewCreate: productReviewCreateReducer,\n  productTopRated: productTopRatedReducer\n}); // Get cartItems from local storage\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []; // Get userInfo from local storage\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null; // Get shippingAddress from local storage\n\nconst shipppingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {}; // Get paymentMethod from local storage\n\nconst paymentMethodFromStorage = localStorage.getItem('paymentMethod') ? JSON.parse(localStorage.getItem('paymentMethod')) : {}; // Create initial state\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shipppingAddressFromStorage,\n    paymentMethod: paymentMethodFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n}; // Set middleware to thunk middleware\n\nconst middleware = [thunk]; // Create store\n// Pass initial state to load things at that point\n// Setup redux-devtools-extension\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/konghaoming/Desktop/react-complete-e-commerce-main/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","productDeleteReducer","productCreateReducer","productUpdateReducer","productReviewCreateReducer","productTopRatedReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","userListReducer","userDeleteReducer","userUpdateReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderListMyReducer","orderListReducer","orderDeliverReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","userList","userUpdate","userDelete","orderCreate","orderDetails","orderPay","orderListMy","orderDeliver","productDelete","productCreate","productUpdate","orderList","productReviewCreate","productTopRated","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shipppingAddressFromStorage","paymentMethodFromStorage","initialState","cartItems","shippingAddress","paymentMethod","userInfo","middleware","store"],"mappings":"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","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport {\n\tproductListReducer,\n\tproductDetailsReducer,\n\tproductDeleteReducer,\n\tproductCreateReducer,\n\tproductUpdateReducer,\n\tproductReviewCreateReducer,\n\tproductTopRatedReducer,\n} from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport {\n\tuserLoginReducer,\n\tuserRegisterReducer,\n\tuserDetailsReducer,\n\tuserUpdateProfileReducer,\n\tuserListReducer,\n\tuserDeleteReducer,\n\tuserUpdateReducer,\n} from './reducers/userReducers'\nimport {\n\torderCreateReducer,\n\torderDetailsReducer,\n\torderPayReducer,\n\torderListMyReducer,\n\torderListReducer,\n\torderDeliverReducer,\n} from './reducers/orderReducers'\n\nconst reducer = combineReducers({\n\tproductList: productListReducer,\n\tproductDetails: productDetailsReducer,\n\tcart: cartReducer,\n\tuserLogin: userLoginReducer,\n\tuserRegister: userRegisterReducer,\n\tuserDetails: userDetailsReducer,\n\tuserUpdateProfile: userUpdateProfileReducer,\n\tuserList: userListReducer,\n\tuserUpdate: userUpdateReducer,\n\tuserDelete: userDeleteReducer,\n\torderCreate: orderCreateReducer,\n\torderDetails: orderDetailsReducer,\n\torderPay: orderPayReducer,\n\torderListMy: orderListMyReducer,\n\torderDeliver: orderDeliverReducer,\n\tproductDelete: productDeleteReducer,\n\tproductCreate: productCreateReducer,\n\tproductUpdate: productUpdateReducer,\n\torderList: orderListReducer,\n\tproductReviewCreate: productReviewCreateReducer,\n\tproductTopRated: productTopRatedReducer,\n})\n\n// Get cartItems from local storage\nconst cartItemsFromStorage = localStorage.getItem('cartItems')\n\t? JSON.parse(localStorage.getItem('cartItems'))\n\t: []\n// Get userInfo from local storage\nconst userInfoFromStorage = localStorage.getItem('userInfo')\n\t? JSON.parse(localStorage.getItem('userInfo'))\n\t: null\n// Get shippingAddress from local storage\nconst shipppingAddressFromStorage = localStorage.getItem('shippingAddress')\n\t? JSON.parse(localStorage.getItem('shippingAddress'))\n\t: {}\n// Get paymentMethod from local storage\nconst paymentMethodFromStorage = localStorage.getItem('paymentMethod')\n\t? JSON.parse(localStorage.getItem('paymentMethod'))\n\t: {}\n\n// Create initial state\nconst initialState = {\n\tcart: {\n\t\tcartItems: cartItemsFromStorage,\n\t\tshippingAddress: shipppingAddressFromStorage,\n\t\tpaymentMethod: paymentMethodFromStorage,\n\t},\n\tuserLogin: { userInfo: userInfoFromStorage },\n}\n\n// Set middleware to thunk middleware\nconst middleware = [thunk]\n\n// Create store\n// Pass initial state to load things at that point\n// Setup redux-devtools-extension\nconst store = createStore(\n\treducer,\n\tinitialState,\n\tcomposeWithDevTools(applyMiddleware(...middleware))\n)\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}